'''
This module is designed to generate "embed" objects,
which are then passed to main.by
'''
import datetime as date
from discord import Embed

class Generate():
    '''
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö 'embed' –æ–±—ä–µ–∫—Ç–æ–≤.
    –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–∫–∂–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
    '''
    def __init__(self):
        self.last_data = ''
        self.last_server_status = ''
        self.color_list = {
        'gray' : 12237498,
        'green' : 65280,
        'blue' : 2518253,
        'purple' : 12464383,
        'red' : 16711680,
        'orange' : 15763456,
        }
        self._region_list = [
        'ru','eu',
        'na','asia',
        ]
        self.color_gradient = [
        11321088, 12533760,
        12545024, 16711680,
        65280,
        ]
        self.__emb_dict = {
        "title": '',
        "color": '',
        "description": '',
        "timestamp": "",
        "author": {
        "name": "[HVOLT] WoTB Statistics"
        },
        "image": {},
        "thumbnail": {},
        "footer": {
        "text": ""
        },
        "fields": []
        }
        offset = date.timedelta(hours=3)
        self.tz_msc = date.timezone(offset, name='| MSC (UTC + 3)')
        offset = date.timedelta(hours=1)
        self.tz_cet = date.timezone(offset, name='| CET (UTC + 1)')
        offset = date.timedelta(hours=-4)
        self.tz_edt = date.timezone(offset, name='| EDT (UTC -4)')
        offset = date.timedelta(hours=9)
        self.tz_kst = date.timezone(offset, name='| KST (UTC +9)')

    def color_set_online(self, online):
        '''
        –í–æ–∑–≤—Ä–∞—à–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–Ω–ª–∞–π–Ω–∞
        –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –≠—Ç–æ —á–∏—Å–ª–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ—â—É–µ—Ç —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –≤ embed
        —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        '''
        color = 000000
        if online < 8000:
            color = self.color_list['red']
        elif online < 15000:
            color = self.color_list['orange']
        elif online >= 15000:
            color = self.color_list['green']
        return color

    def region_time(self,region):
        '''
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_server_status
        '''
        region = region.lower()
        if region == 'ru':
            time = date.datetime.now(tz=self.tz_msc).strftime("%H:%M")
            time += ' ' + self.tz_msc.tzname(date.datetime.now())
            return time

        if region == 'eu':
            time = date.datetime.now(tz=self.tz_cet).strftime("%H:%M")
            time += ' ' + self.tz_cet.tzname(date.datetime.now())
            return time

        if region == 'na':
            time = date.datetime.now(tz=self.tz_edt).strftime("%H:%M")
            time += ' ' + self.tz_edt.tzname(date.datetime.now())
            return time

        if region == 'asia':
            time = date.datetime.now(tz=self.tz_kst).strftime("%H:%M")
            time += ' ' + self.tz_kst.tzname(date.datetime.now())
            return time
        return None

    def color_set_winrate(self, winrate):
        '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç % –ø–æ–±–µ–¥
        —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 1 –∑–Ω–∞—á–µ–Ω–∏–µ
        % –ø–æ–±–µ–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ,
        –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞—ë—Ç —Ü–≤–µ—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        '''
        color = 000000
        if winrate < 48:
            color = self.color_list['gray']
        elif winrate < 60:
            color = self.color_list['green']
        elif winrate < 70:
            color = self.color_list['blue']
        elif winrate >= 70:
            color = self.color_list['purple']
            
        return color

    def server_status(self,data):
        '''
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º embed –æ–±—ä–µ–∫—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º
        —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ wot_blitz
        '''
        players_online = data['data']['wotb'][0]['players_online']
        server_name = data['data']['wotb'][0]['server']
        description = f'''
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: **{server_name}**
üïì –í—Ä–µ–º—è —Ä–µ–≥–∏–æ–Ω–∞: **{self.region_time(server_name)}**
üéØ –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: **{players_online:,}**
üñçÔ∏è –°—Ç–∞—Ç—É—Å: **{'ONLINE  üü¢' if players_online > 0 else 'OFFLINE  üî¥'}**
'''
        emb_dict = self.__emb_dict
        emb_dict['footer']['text'] = 'üî∏ –¶–≤–µ—Ç —Ä–∞–º–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞'
        emb_dict['color'] = self.color_set_online(players_online)
        emb_dict['title'] = '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ WoT Blitz'
        emb_dict['description'] = description
        embed = Embed.from_dict(emb_dict)
        return embed

    def server_status_all(self,data):
        '''
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º embed –æ–±—ä–µ–∫—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º
        —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ wot_blitz
        '''
        multi_description = []
        multi_description.clear()
        alive_counter = 0
        # alive_counter - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–∏—Å–ª–æ '–∂–∏–≤—ã—Ö' —Å–µ—Ä–≤–µ—Ä–æ–≤
        for i in range(4):
            players_online = data[i]['data']['wotb'][0]['players_online']
            server_name = data[i]['data']['wotb'][0]['server']
            multi_description.append(f'''
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: **{server_name}**
üïì –í—Ä–µ–º—è —Ä–µ–≥–∏–æ–Ω–∞: {self.region_time(server_name)}
üéØ –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: **{players_online:,}**
üñçÔ∏è –°—Ç–∞—Ç—É—Å: **{'ONLINE  üü¢' if players_online > 0 else 'OFFLINE  üî¥'}**
üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏''')
        emb_dict = self.__emb_dict
        emb_dict['title'] = '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ WoT Blitz'
        emb_dict['color'] = self.color_gradient[alive_counter]
        emb_dict['description'] = ''
        for i in range(4):
            emb_dict['description'] += multi_description[i]

        emb_dict['footer']['text'] = 'üî∏ –¶–≤–µ—Ç —Ä–∞–º–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ \
                                      –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤'
        embed = Embed.from_dict(emb_dict)
        return embed

    def account_data(self,data,player_id):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º embed –æ–±—ä–µ–∫—Ç —Å–æ
        —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–∞.
        –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "data" —Å–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–æ "d" –≤ —É–≥–æ–¥—É
        –¥–ª–∏–Ω–Ω—ã —Å—Ç—Ä–æ–∫. –¢–æ–∂–µ –∫–∞—Å–∞–µ—Ç—Å—è –∏ "player_id"
        """
        p_id = str(player_id)
        d = data
        battles = d['data'][p_id]['statistics']['all']['battles']
        
        # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è battles –∑–∞–¥–∞—ë—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
        # –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
        

        # –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
        if battles == 0:
            last_battle = '\'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\''
        else:
            last_battle = date.datetime.fromtimestamp(d['data'][p_id]['last_battle_time'])

        created_at = date.datetime.fromtimestamp(d['data'][p_id]['created_at'])
        updated_at = date.datetime.fromtimestamp(d['data'][p_id]['updated_at'])
        nickname = d['data'][p_id]['nickname']

        datetime_now = date.datetime.now()
        account_age = datetime_now - created_at
        account_age = account_age.days

        # –±–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        dropped_capture_point = d['data'][p_id]['statistics']['all']['dropped_capture_points']
        win_and_survived = d['data'][p_id]['statistics']['all']['win_and_survived']
        survived_battles = d['data'][p_id]['statistics']['all']['survived_battles']
        damage_received = d['data'][p_id]['statistics']['all']['damage_received']
        capture_points = d['data'][p_id]['statistics']['all']['capture_points']
        damage_dealt = d['data'][p_id]['statistics']['all']['damage_dealt']
        spotted = d['data'][p_id]['statistics']['all']['spotted']
        max_xp = d['data'][p_id]['statistics']['all']['max_xp']
        frags = d['data'][p_id]['statistics']['all']['frags']
        hits = d['data'][p_id]['statistics']['all']['hits']

        losses = d['data'][p_id]['statistics']['all']['losses']
        wins = d['data'][p_id]['statistics']['all']['wins']

        max_frags = d['data'][p_id]['statistics']['all']['max_frags']
        frags8p = d['data'][p_id]['statistics']['all']['frags8p']
        shots = d['data'][p_id]['statistics']['all']['shots']
        xp = d['data'][p_id]['statistics']['all']['xp']

        # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        if battles == 0:
            frags8p_coeff = 0
            awg_damage = 0
            rd_damage = 0
            survival = 0
            accuracy = 0
            winrate = 0
            battles_per_day = 0
        else:
            battles_per_day = battles // account_age
            if battles_per_day == 0:
                battles_per_day = '< 1'

            rd_damage = round((damage_dealt / damage_received),2)
            frags8p_coeff = round((frags8p / (frags-frags8p)),2)
            survival = round((survived_battles / battles)*100,2)
            winrate = round((wins / battles)*100,2)
            accuracy = round((hits / shots)*100,2)
            awg_damage = damage_dealt // battles

        # —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–µ—â—ë–Ω –≤ embed
        self.last_data = f'''```python
‚ïî|–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:
‚ïö|[{updated_at.strftime("%Y|%m|%d - %H:%M")}]
--------|–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|--------
‚ïî|–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: [{created_at.strftime("%Y|%m|%d - %H:%M")}]
‚ï†|–ü–æ—Å–ª–µ–¥–Ω—ã–π –±–æ–π: [{last_battle.strftime("%Y|%m|%d - %H:%M")}]
‚ï†|ID –ê–∫–∫–∞—É–Ω—Ç–∞: {p_id}
‚ï†|–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {account_age} –¥–Ω–µ–π.
‚ïö|–ë–æ—ë–≤ –≤ —Å—É—Ç–∫–∏: {battles_per_day}
---------|–ë–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|---------
‚ïî|–ë–æ—ë–≤ —Å—ã–≥—Ä–∞–Ω–æ: {battles:,}
‚ï†|–ü–æ–±–µ–¥—ã:  {wins:,}
‚ï†|–ü–æ—Ä–∞–∂–µ–Ω–∏—è:  {losses:,}
‚ïö|–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:  {winrate}%

‚ïî|–í—ã—Å—Ç—Ä–µ–ª—ã:  {shots:,}
‚ï†|–ü–æ–ø–∞–¥–∞–Ω–∏—è:  {hits:,}
‚ïö|–¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã:  {accuracy}%

‚ïî|–í—ã–∂–∏–ª –≤ –±–æ—è—Ö:  {survived_battles:,}
‚ï†|–ü–æ–±–µ–¥–∏–ª –∏ –≤—ã–∂–∏–ª:  {win_and_survived:,}
‚ïö|–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤–∞–Ω–∏—è:  {survival}%

‚ïî|–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞:  {damage_dealt:,}
‚ï†|–ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞:  {damage_received:,}
‚ï†|–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω:  {awg_damage:,}
‚ïö|–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Ä–æ–Ω–∞  (–Ω/–ø): {rd_damage}

‚ïî|–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ —Ç–∞–Ω–∫–æ–≤:  {frags:,}
‚ï†|–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ —Ç–∞–Ω–∫–æ–≤ >= 8 —É—Ä:  {frags8p:,}
‚ïö|–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç frags8p:  {frags8p_coeff}

‚ïî|–û—á–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞:  {capture_points:,}
‚ïö|–°–±–∏—Ç—ã–µ –æ—á–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞:  {dropped_capture_point:,}

‚ïî|–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞:  {xp:,}
‚ïö|–ú–∞–∫—Å–∏–º—É–º –æ–ø—ã—Ç–∞ –∑–∞ –±–æ–π:  {max_xp:,}

‚ïî|–ú–∞–∫—Å–∏–º—É–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ –∑–∞ –±–æ–π:  {max_frags:,}
‚ïö|–¢–µ—Ö–Ω–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ:  {spotted:,}
```'''
        emb_dict_stats = {
            "title": nickname,
            "color": self.color_set_winrate(winrate),
            "description": self.last_data,
            "timestamp": "",
            "author": {
                "name": "[HVOLT] WoTB Statistics"
            },
            "image": {},
            "thumbnail": {},
            "footer": {
                "text": "üî∏ –¶–≤–µ—Ç —Ä–∞–º–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç % –ø–æ–±–µ–¥ –∏—Å—Å–ª–µ–¥—É–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
            },
            "fields": []
            }

        embed_stats = Embed.from_dict(emb_dict_stats)
        return embed_stats
